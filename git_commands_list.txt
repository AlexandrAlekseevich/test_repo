# Конфигурация
git config -global user.name {{name}} 		задать имя
				   user.email {{email}} 	задать email
git config --list


# ветвление слияние
git branch 						список веток
		   -a 					увидеть все ветки и с удалённого репозитория тоже
git branch {{branch name}} 		создать ветку
		   -m {{branch name}} 	переименовать текущую ветку
		   -d {{branch name}} 	удалить указанную ветку
								!! текущую ветку удалить нельзя, сначала переключись в другую ветку 

git checkout {{branch name}} 	переключится на ветку
		     -b {{branch name}}}  создать ветку и переключится в неё

git merge {{branch name}} 		влить в текущую ветку указанную ветку
		  -m {{commit message}} {{branch name}} 	влить ветку и сразу указать сообщение коммита


# работа с коммитами
git commit
		-m {{"commit message"}}
		-a 						аналогично вызову git add -A
git log 						журнал коммитов
git diff 						показать различия в файлах


# ??
git reset --soft
git restore --staged

# ?? работа с удалённым репозиторием
fetch 							забрать с github все изменения ссылок 
# после fetch выполни merge original себе в ветку
clone

# взаимодействие между локальным и удалённым репозиторием происходит на основе веток
pull 							загрузка и применение изменений с удалённой ветки в локальную
push 							загрузка изменений из локальной ветки в ветку удалённого репозитория

# продвинутые команды
blame находит автора конкретной строки
cherry-pic забрать коммитов
stash сохранить изменения в тайник
rebase последовательный cherry-pic коммитов из одной ветки на другую начиная с первого общего предка

# правила составления коммитов
1) добавлять ID задачи;
2) писать короткие заголовки ― до 50 символов;
3) делать отступ между заголовком и описанием;
4) писать заголовок с заглавной буквы;
5) не ставить точку в конце заголовка описания;
6) использовать в заголовке глагол в форме инфинитива;
7) ограничивать длину строки в теле описания 72 символами;
8) в теле описания отвечать на вопросы: «Что сделали?» и «Почему сделали?»

рабочая директория
индекс
репозиторий


git cat-file -t {{HASH}} 		читать содержимое объектов git по их хешу
		     -t 				тип
			 -p 				содержимое
